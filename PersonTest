package person;

import static org.junit.Assert.*;
import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import java.time.chrono.IsoChronology;
import org.junit.Before;
import org.junit.Test;

/**
 * Write a one-sentence summary of your class here. Follow it with additional details about its
 * purpose, what abstraction it represents, and how to use it.
 * 
 * @author sugie
 * @version 30 Oct 2018
 */
public class PersonTest
{
    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    private Person                      fred;
    private Person                      jane;


    /**
     * Place a description of your method here.
     * 
     * @throws Exception
     */
    @Before
    public void setUp()
        throws Exception
    {
        System.setOut(new PrintStream(outContent));
        fred = new Person(
            "Fred",
            IsoChronology.INSTANCE.date(1980, 6, 20),
            Person.Sex.MALE,
            "fred@example.com");
        jane = new Person(
            "Jane",
            IsoChronology.INSTANCE.date(1990, 7, 15),
            Person.Sex.FEMALE,
            "jane@example.com");
    }


    /**
     * Place a description of your method here.
     */
    @Test(expected = NullPointerException.class)
    public void testCostructorNameIsNull()
    {
        fred = new Person(
            null,
            IsoChronology.INSTANCE.date(1980, 6, 20),
            Person.Sex.MALE,
            "fred@example.com");
    }


    /**
     * Place a description of your method here.
     */
    @Test(expected = NullPointerException.class)
    public void testCostructorBirthdayIsNull()
    {
        fred = new Person("Fred", null, Person.Sex.MALE, "fred@example.com");
    }


    /**
     * Place a description of your method here.
     */
    @Test(expected = NullPointerException.class)
    public void testCostructorGenderIsNull()
    {
        fred =
            new Person("Fred", IsoChronology.INSTANCE.date(1980, 6, 20), null, "fred@example.com");
    }


    /**
     * Place a description of your method here.
     */
    @Test(expected = NullPointerException.class)
    public void testCostructorEmailIsNull()
    {
        fred = new Person("Fred", IsoChronology.INSTANCE.date(1980, 6, 20), Person.Sex.MALE, null);
    }


    /**
     * Place a description of your method here.
     */
    @Test(expected = IllegalArgumentException.class)
    public void testConstructorNameIsEmpty()
    {
        fred = new Person(
            "",
            IsoChronology.INSTANCE.date(1980, 6, 20),
            Person.Sex.MALE,
            "fred@example.com");
    }


    /**
     * Place a description of your method here.
     */
    @Test(expected = IllegalArgumentException.class)
    public void testConstructorBirthdayIsEarly()
    {
        fred = new Person(
            "Fred",
            IsoChronology.INSTANCE.date(1799, 12, 31),
            Person.Sex.MALE,
            "fred@example.com");
    }


    /**
     * Place a description of your method here.
     */
    @Test(expected = IllegalArgumentException.class)
    public void testConstructorBirthdayIsLate()
    {
        fred = new Person(
            "Fred",
            IsoChronology.INSTANCE.date(2500, 1, 1),
            Person.Sex.MALE,
            "fred@example.com");
    }


    /**
     * Place a description of your method here.
     */
    @Test(expected = IllegalArgumentException.class)
    public void testConstructorEmailIsEmpty()
    {
        fred = new Person("Fred", IsoChronology.INSTANCE.date(1980, 6, 20), Person.Sex.MALE, "");
    }


    /**
     * Place a description of your method here.
     */
    @Test(expected = IllegalArgumentException.class)
    public void testConstructorEmailNoAt()
    {
        fred = new Person(
            "Fred",
            IsoChronology.INSTANCE.date(1980, 6, 20),
            Person.Sex.MALE,
            "fredexample.com");
    }


    /**
     * Place a description of your method here.
     */
    @Test
    public void testToString()
    {
        assertEquals("(Fred, 1980-06-20, MALE, fred@example.com)", fred.toString());
        assertEquals("(Jane, 1990-7-15, FEMALE, jane@example.com)", jane.toString());
    }


    /**
     * Place a description of your method here.
     */
    @Test
    public void testHashCode()
    {
        Person fred2 = new Person(
            "Fred",
            IsoChronology.INSTANCE.date(1980, 6, 20),
            Person.Sex.MALE,
            "fred@example.com");
        assertEquals(fred.hashCode(), fred2.hashCode());
        assertNotEquals(fred.hashCode(), jane.hashCode());
    }


    /**
     * Place a description of your method here.
     */
    @Test
    public void testEqualsFredFred2()
    {
        Person fred2 = new Person(
            "Fred",
            IsoChronology.INSTANCE.date(1980, 6, 20),
            Person.Sex.MALE,
            "fred@example.com");
        assertEquals(fred, fred2);
    }


    /**
     * Place a description of your method here.
     */
    @Test
    public void testEqualsFredFred()
    {
        assertEquals(fred, fred);
    }


    /**
     * Place a description of your method here.
     */
    @Test
    public void testEqualsFredNull()
    {
        assertNotEquals(fred, null);
    }


    /**
     * Place a description of your method here.
     */
    @Test
    public void testEqualsFredHello()
    {
        assertNotEquals(fred, "Hello");
    }


    /**
     * Place a description of your method here.
     */
    @Test
    public void testEqualsFredJane()
    {
        assertNotEquals(fred, jane);
    }


    /**
     * Place a description of your method here.
     */
    @Test
    public void testEqualsBirthdayNotEqual()
    {
        Person fred2 = new Person(
            "Fred",
            IsoChronology.INSTANCE.date(1990, 7, 15),
            Person.Sex.FEMALE,
            "jane@example.com");
        assertNotEquals(fred, fred2);
    }


    /**
     * Place a description of your method here.
     */
    @Test
    public void testEqualsGenderNotEqual()
    {
        Person fred2 = new Person(
            "Fred",
            IsoChronology.INSTANCE.date(1980, 6, 20),
            Person.Sex.FEMALE,
            "fred@example.com");
        assertNotEquals(fred, fred2);
    }


    /**
     * Place a description of your method here.
     */
    @Test
    public void testEqualsEmailNotEqual()
    {
        Person fred2 = new Person(
            "Fred",
            IsoChronology.INSTANCE.date(1980, 6, 20),
            Person.Sex.MALE,
            "jane@example.com");
        assertNotEquals(fred, fred2);
    }


    /**
     * Place a description of your method here.
     */
    @Test
    public void testCompareToFredFred2()
    {
        Person fred2 = new Person(
            "Fred",
            IsoChronology.INSTANCE.date(1980, 6, 20),
            Person.Sex.MALE,
            "fred@example.com");
        assertTrue(fred.compareTo(fred2) == 0);
    }


    /**
     * Place a description of your method here.
     */
    @Test
    public void testCompareToFredJane()
    {
        assertTrue(fred.compareTo(jane) < 0);
    }


    /**
     * Place a description of your method here.
     */
    @Test
    public void testCompareToBirthdayNotEqual()
    {
        Person fred2 = new Person(
            "Fred",
            IsoChronology.INSTANCE.date(1970, 7, 15),
            Person.Sex.FEMALE,
            "jane@example.com");
        assertTrue(fred.compareTo(fred2) > 0);
    }


    /**
     * Place a description of your method here.
     */
    @Test
    public void testCompareToGenderNotEqual()
    {
        Person fred2 = new Person(
            "Fred",
            IsoChronology.INSTANCE.date(1980, 6, 20),
            Person.Sex.FEMALE,
            "fred@example.com");
        assertTrue(fred.compareTo(fred2) < 0);
    }


    /**
     * Place a description of your method here.
     */
    @Test
    public void testCompareToEmailNotEqual()
    {
        Person fred2 = new Person(
            "Fred",
            IsoChronology.INSTANCE.date(1980, 6, 20),
            Person.Sex.MALE,
            "jane@example.com");
        assertTrue(fred.compareTo(fred2) < 0);
    }


    /**
     * Place a description of your method here.
     */
    @Test
    public void testGetName()
    {
        assertEquals("Fred", fred.getName());
        assertEquals("Jane", jane.getName());
    }


    /**
     * Place a description of your method here.
     */
    @Test
    public void testGetBirthday()
    {
        assertEquals(IsoChronology.INSTANCE.date(1980, 6, 20), fred.getBirthday());
        assertEquals(IsoChronology.INSTANCE.date(1990, 7, 15), jane.getBirthday());
    }


    /**
     * Place a description of your method here.
     */
    @Test
    public void testGetGender()
    {
        assertEquals(Person.Sex.MALE, fred.getGender());
        assertEquals(Person.Sex.FEMALE, jane.getGender());
    }


    /**
     * Place a description of your method here.
     */
    @Test
    public void testGetEmail()
    {
        assertEquals("fred@example.com", fred.getEmailAddress());
        assertEquals("jane@example.com", jane.getEmailAddress());
    }


    /**
     * Place a description of your method here.
     */
    @Test
    public void testGetAge()
    {
        assertTrue(fred.getAge() >= 35);
        assertTrue(jane.getAge() >= 25);
    }


    /**
     * Place a description of your method here.
     */
    @Test
    public void testEnumSex()
    {
        assertEquals(Person.Sex.MALE, Person.Sex.valueOf("MALE"));
        assertEquals(2, Person.Sex.values().length);
    }
}
